/* CPYHDR { */
/*
 * This file is part of the 'iit-rbd' library.
 * Copyright © 2015 2016 2017, Marco Frigerio (marco.frigerio@iit.it)
 *
 * See the LICENSE file for more information.
 */
/* } CPYHDR */
#ifndef IIT_RBD_H_
#define IIT_RBD_H_

#include <Eigen/Dense>
#define EIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET 1
#include <Eigen/Sparse>


namespace iit {
/**
 * This namespace contains some basic types and functions related to spatial
 * vectors and Rigid Body Dynamics (RBD).
 *
 * This code has been developed to provide basic types and general utilities to
 * be used in turn by the C++ classes generated by the Robotics Code Generator
 * (RobCoGen). That is, the code is just meant to be a common, generic facility
 * for all the robot-specific code that RobCoGen can generate.
 *
 * In other words, the primary target of the \c iit_rbd library is not to
 * provide a comprehensive object-oriented implementation of concepts of
 * rigid-body dynamics and spatial vectors, for end-user applications. Some
 * of such concepts do appear in this software, although the implementation is
 * relatively simple.
 * However, the library may very well be used in custom code that needs e.g.
 * a type for spatial vectors or for the spatial 6x6 inertia tensor.
 */
namespace rbd {

/** \name Basic matrix types */
///@{
// Use alias templates to limit the references to 'Eigen' to this header

template<typename Derived>
using MatrixBase = Eigen::MatrixBase< Derived >;

template<typename Scalar, int R, int C>
using PlainMatrix = Eigen::Matrix< Scalar, R, C >;

template<typename XprType, int R, int C>
using MatrixBlock = Eigen::Block< XprType, R, C >;

template<typename Scalar>
using SparseMatrix = Eigen::SparseMatrix<Scalar>;

template<typename Scalar>
using SparseVector = Eigen::SparseVector<Scalar>;
///@}

/** \name Other basic types */
///@{
typedef Eigen::Matrix3d Matrix33d;
typedef Eigen::Vector3d Vector3d;

typedef PlainMatrix<double, 6, 6> Matrix66d;
typedef SparseMatrix<double>      SparseMatrixd;

typedef PlainMatrix<double, 6, 1> Column6d;
typedef SparseVector<double> SparseColumnd;
///@}

/**
 * \name 6D vectors "à la Featherstone"
 * Types of vectors used in dynamics computations.
 */
///@{
typedef Column6d Vector6D;
typedef Vector6D VelocityVector;
typedef Vector6D ForceVector;

typedef MatrixBlock<Vector6D,3,1>       Part3D;     ///< a 3D subvector of a 6D vector
typedef MatrixBlock<const Vector6D,3,1> Part3DConst;///< a const 3D subvector of a 6D vector
///@}

/**
 *  \name 6D vectors accessors
 *  These functions allow to access the linear and the angular coordinates of
 *  motion/force vectors.
 */
///@{
/**
 * The 3-coordinate vector with the angular components (angular
 * velocity or torque) of the given 6D vector.
 */
inline Part3D angularPart(Vector6D& f) {
	return f.topRows<3>();
}
/**
 * The 3-coordinate vector with the linear components (linear
 * velocity or force) of the given 6D vector.
 */
inline Part3D linearPart(Vector6D& f) {
	return f.bottomRows<3>();
}

inline Part3DConst angularPart(const Vector6D& f) {
    return f.topRows<3>();
}
inline Part3DConst linearPart(const Vector6D& f) {
    return f.bottomRows<3>();
}
///@}

/**
 * \name Vector coordinates
 * Constants to index either 6D or 3D coordinate vectors.
 */
///@{
enum Coords3D { X=0, Y, Z};
/// To be used with 6D vectors. 'A' stands for angular, 'L' for linear.
enum Coords6D { AX=0, AY, AZ, LX, LY, LZ };
///@}

class InertiaMatrixDense;
class InertiaMatrixSparse;

class CoordinateTransformDense;
class CoordinateTransformSparse;

class MotionSubspaceMxDense;
class MotionSubspaceMxSparse;

/**
 * The Earth gravitational acceleration constant.
 * This value should always be positive, so that an application
 * chooses the sign according to its conventions.
 */
static const double g = 9.81;

}
}


#endif /* IIT_RBD_H_ */
